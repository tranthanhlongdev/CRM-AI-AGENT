========================================
AGENT STATUS API - CURL TEST COMMANDS
========================================

üåê BASE URL: http://localhost:8000

üìä API ENDPOINTS CHO TR·∫†NG TH√ÅI AGENT
=====================================

## 1. L·∫•y tr·∫°ng th√°i t·∫•t c·∫£ agents
GET /api/agents/status

curl http://localhost:8000/api/agents/status | jq .

Response:
{
  "success": true,
  "data": {
    "agents": [
      {
        "id": 1,
        "userId": 1,
        "username": "admin",
        "fullName": "Admin User",
        "status": "available",
        "currentCallId": null,
        "totalCalls": 0,
        "avgHandleTime": 0.0,
        "priority": 1,
        "lastActivity": "2025-09-18T15:26:21"
      }
    ],
    "stats": {
      "total": 2,
      "available": 1,
      "busy": 0,
      "away": 0,
      "offline": 1
    }
  },
  "message": "L·∫•y tr·∫°ng th√°i 2 agents th√†nh c√¥ng"
}

## 2. L·∫•y tr·∫°ng th√°i agent c·ª• th·ªÉ theo ID
GET /api/agents/{agent_id}/status

curl http://localhost:8000/api/agents/1/status | jq .

## 3. L·∫•y tr·∫°ng th√°i agent theo User ID
GET /api/agents/user/{user_id}/status

curl http://localhost:8000/api/agents/user/1/status | jq .

## 4. L·∫•y danh s√°ch agents ƒëang available
GET /api/agents/available

curl http://localhost:8000/api/agents/available | jq .

Response:
{
  "success": true,
  "data": {
    "agents": [...],
    "count": 2
  },
  "message": "C√≥ 2 agents ƒëang s·∫µn s√†ng"
}

## 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i agent
PUT /api/agents/{agent_id}/status

curl -X PUT http://localhost:8000/api/agents/1/status \
  -H "Content-Type: application/json" \
  -d '{
    "status": "busy"
  }' | jq .

Valid statuses: available, busy, on_call, away, offline

## 6. T·∫°o agent profile cho user
POST /api/agents/create

curl -X POST http://localhost:8000/api/agents/create \
  -H "Content-Type: application/json" \
  -d '{
    "userId": 3,
    "status": "available",
    "priority": 1
  }' | jq .

üîÑ TEST FLOW HO√ÄN CH·ªàNH
======================

## Step 1: Ki·ªÉm tra users c√≥ s·∫µn
curl http://localhost:8000/api/auth/users | jq .

## Step 2: T·∫°o agents cho users
curl -X POST http://localhost:8000/api/agents/create \
  -H "Content-Type: application/json" \
  -d '{"userId": 1, "status": "available", "priority": 1}' | jq .

curl -X POST http://localhost:8000/api/agents/create \
  -H "Content-Type: application/json" \
  -d '{"userId": 2, "status": "offline", "priority": 2}' | jq .

## Step 3: Ki·ªÉm tra tr·∫°ng th√°i t·∫•t c·∫£ agents
curl http://localhost:8000/api/agents/status | jq .

## Step 4: C·∫≠p nh·∫≠t agent offline th√†nh available
curl -X PUT http://localhost:8000/api/agents/2/status \
  -H "Content-Type: application/json" \
  -d '{"status": "available"}' | jq .

## Step 5: Ki·ªÉm tra agents available
curl http://localhost:8000/api/agents/available | jq .

## Step 6: Test cu·ªôc g·ªçi v·ªõi agents available
curl -X POST http://localhost:8000/api/call/demo/initiate \
  -H "Content-Type: application/json" \
  -d '{"callerNumber": "0912345678"}' | jq .

## Step 7: Ki·ªÉm tra tr·∫°ng th√°i sau cu·ªôc g·ªçi
curl http://localhost:8000/api/call/demo/status | jq .

üì± T√çCH H·ª¢P SOFTPHONE
====================

## Ki·ªÉm tra agents tr∆∞·ªõc khi g·ªçi
curl http://localhost:8000/api/agents/available | jq .

## T·∫°o cu·ªôc g·ªçi
curl -X POST http://localhost:8000/api/call/demo/initiate \
  -H "Content-Type: application/json" \
  -d '{
    "callerNumber": "0987654321",
    "calledNumber": "1900"
  }' | jq .

Ph·∫£n h·ªìi c√≥ th·ªÉ l√†:
- status: "ringing" - c√≥ agent available
- status: "queued" - kh√¥ng c√≥ agent, v√†o h√†ng ƒë·ª£i

üéß T√çCH H·ª¢P AGENT DASHBOARD
==========================

## Agent login v√† set status
curl -X PUT http://localhost:8000/api/agents/user/1/status \
  -H "Content-Type: application/json" \
  -d '{"status": "available"}' | jq .

## Monitor real-time agent status
curl http://localhost:8000/api/agents/status | jq .

## Set agent away
curl -X PUT http://localhost:8000/api/agents/1/status \
  -H "Content-Type: application/json" \
  -d '{"status": "away"}' | jq .

## Set agent offline
curl -X PUT http://localhost:8000/api/agents/1/status \
  -H "Content-Type: application/json" \
  -d '{"status": "offline"}' | jq .

üö® ERROR CASES
==============

## Agent kh√¥ng t·ªìn t·∫°i
curl http://localhost:8000/api/agents/999/status | jq .
Response: {"success": false, "message": "Agent kh√¥ng t·ªìn t·∫°i"} (404)

## Status kh√¥ng h·ª£p l·ªá
curl -X PUT http://localhost:8000/api/agents/1/status \
  -H "Content-Type: application/json" \
  -d '{"status": "invalid_status"}' | jq .
Response: {"success": false, "message": "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá..."} (400)

## T·∫°o agent cho user kh√¥ng t·ªìn t·∫°i
curl -X POST http://localhost:8000/api/agents/create \
  -H "Content-Type: application/json" \
  -d '{"userId": 999}' | jq .
Response: {"success": false, "message": "User kh√¥ng t·ªìn t·∫°i"} (404)

## T·∫°o agent ƒë√£ t·ªìn t·∫°i
curl -X POST http://localhost:8000/api/agents/create \
  -H "Content-Type: application/json" \
  -d '{"userId": 1}' | jq .
Response: {"success": false, "message": "Agent ƒë√£ t·ªìn t·∫°i cho user n√†y"} (409)

üìà MONITORING COMMANDS
=====================

## Real-time monitoring script
while true; do
  echo "=== $(date) ==="
  curl -s http://localhost:8000/api/agents/status | jq '.data.stats'
  echo
  sleep 5
done

## Quick status check
curl -s http://localhost:8000/api/agents/status | jq '.data.stats'

## Available agents count
curl -s http://localhost:8000/api/agents/available | jq '.data.count'

========================================
END OF AGENT STATUS API TESTS
========================================

‚úÖ T·∫§T C·∫¢ API ƒê√É ƒê∆Ø·ª¢C TEST V√Ä HO·∫†T ƒê·ªòNG T·ªêD√å!

üìû S·∫µn s√†ng ƒë·ªÉ t√≠ch h·ª£p frontend:
- Softphone c√≥ th·ªÉ check available agents
- Agent dashboard c√≥ th·ªÉ update status  
- Call routing ho·∫°t ƒë·ªông v·ªõi agents th·∫≠t
- WebSocket events ƒë·∫ßy ƒë·ªß cho real-time updates
