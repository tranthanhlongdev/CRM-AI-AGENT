==========================================
CRM WEBSOCKET INTEGRATION - NH·∫¨N CU·ªòC G·ªåI
==========================================

üéØ T·ªîNG QUAN
============

Khi customer g·ªçi t·ª´ softphone, CRM system s·∫Ω nh·∫≠n ƒë∆∞·ª£c WebSocket events ƒë·ªÉ:
- Hi·ªÉn th·ªã incoming call popup
- Cho ph√©p agent answer/reject t·ª´ CRM
- Track call status real-time
- Integrate v·ªõi customer data

üîå WEBSOCKET EVENTS CHO CRM
===========================

## 1. Connection Setup

```javascript
// K·∫øt n·ªëi WebSocket t·ª´ CRM
const socket = io('http://localhost:8000');

// CRM join v√†o call center room
socket.emit('join_call_center', {
    userType: 'crm_system',
    userId: 'crm_main',
    clientInfo: {
        platform: 'web',
        version: '1.0.0',
        userAgent: navigator.userAgent
    }
});

socket.on('call_center_joined', (data) => {
    console.log('CRM ƒë√£ join call center:', data);
});
```

## 2. Incoming Call Events

```javascript
// S·ª± ki·ªán c√≥ cu·ªôc g·ªçi ƒë·∫øn
socket.on('incoming_call', (data) => {
    console.log('üìû Incoming call:', data);
    showIncomingCallPopup(data);
});

// S·ª± ki·ªán cu·ªôc g·ªçi ƒë∆∞·ª£c answered
socket.on('call_answered', (data) => {
    console.log('‚úÖ Call answered:', data);
    updateCallStatus(data.call.callId, 'answered');
    hideIncomingCallPopup(data.call.callId);
});

// S·ª± ki·ªán cu·ªôc g·ªçi k·∫øt th√∫c
socket.on('call_ended', (data) => {
    console.log('üì¥ Call ended:', data);
    updateCallStatus(data.callId, 'ended');
    hideIncomingCallPopup(data.callId);
});

// S·ª± ki·ªán agent status thay ƒë·ªïi
socket.on('agent_status_update', (data) => {
    console.log('üë§ Agent status:', data);
    updateAgentStatusInCRM(data);
});

// S·ª± ki·ªán call queue update
socket.on('call_queue_update', (data) => {
    console.log('üìã Queue update:', data);
    updateCallQueueDisplay(data);
});
```

## 3. CRM Actions

```javascript
// CRM c√≥ th·ªÉ th·ª±c hi·ªán c√°c action
function answerCallFromCRM(callId, agentId) {
    socket.emit('answer_call', {
        callId: callId,
        agentId: agentId,
        source: 'crm_system'
    });
}

function rejectCallFromCRM(callId, reason) {
    socket.emit('end_call', {
        callId: callId,
        endReason: reason || 'crm_reject',
        source: 'crm_system'
    });
}

function transferCall(callId, fromAgentId, toAgentId) {
    socket.emit('transfer_call', {
        callId: callId,
        fromAgentId: fromAgentId,
        toAgentId: toAgentId,
        source: 'crm_system'
    });
}
```

üì± CRM UI INTEGRATION
=====================

## 1. Incoming Call Popup

```html
<!-- Popup hi·ªÉn th·ªã cu·ªôc g·ªçi ƒë·∫øn -->
<div id="incomingCallModal" class="call-modal" style="display: none;">
    <div class="modal-content">
        <div class="caller-info">
            <h3>üìû Cu·ªôc g·ªçi ƒë·∫øn</h3>
            <div class="caller-details">
                <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> <span id="callerNumber"></span></p>
                <p><strong>Call ID:</strong> <span id="callId"></span></p>
                <p><strong>Th·ªùi gian:</strong> <span id="callTime"></span></p>
            </div>
            <div id="customerInfo" class="customer-info">
                <!-- Customer data s·∫Ω ƒë∆∞·ª£c load ·ªü ƒë√¢y -->
            </div>
        </div>
        <div class="call-actions">
            <button onclick="answerCall()" class="btn-answer">üìû Tr·∫£ l·ªùi</button>
            <button onclick="rejectCall()" class="btn-reject">‚ùå T·ª´ ch·ªëi</button>
        </div>
        <div class="agent-selection">
            <label>Ch·ªçn Agent:</label>
            <select id="agentSelect">
                <!-- Agents list -->
            </select>
        </div>
    </div>
</div>

<style>
.call-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: white;
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    max-width: 500px;
    width: 90%;
    animation: popupAnimation 0.3s ease-out;
}

@keyframes popupAnimation {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

.caller-info {
    margin-bottom: 20px;
}

.call-actions {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-bottom: 20px;
}

.btn-answer {
    background: #4CAF50;
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}

.btn-reject {
    background: #f44336;
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
}

.customer-info {
    background: #f5f5f5;
    padding: 15px;
    border-radius: 8px;
    margin: 15px 0;
}
</style>
```

## 2. CRM JavaScript Integration

```javascript
class CRMCallIntegration {
    constructor() {
        this.socket = null;
        this.currentCall = null;
        this.availableAgents = [];
        
        this.initSocket();
        this.loadAgents();
    }

    initSocket() {
        this.socket = io('http://localhost:8000');
        
        this.socket.on('connect', () => {
            console.log('‚úÖ CRM connected to call system');
            this.joinCallCenter();
        });

        this.socket.on('incoming_call', (data) => {
            this.handleIncomingCall(data);
        });

        this.socket.on('call_answered', (data) => {
            this.handleCallAnswered(data);
        });

        this.socket.on('call_ended', (data) => {
            this.handleCallEnded(data);
        });

        this.socket.on('agent_status_update', (data) => {
            this.updateAgentStatus(data);
        });

        this.socket.on('call_queue_update', (data) => {
            this.updateCallQueue(data);
        });
    }

    joinCallCenter() {
        this.socket.emit('join_call_center', {
            userType: 'crm_system',
            userId: 'crm_main',
            clientInfo: {
                platform: 'web',
                version: '1.0.0',
                timestamp: new Date().toISOString()
            }
        });
    }

    async handleIncomingCall(callData) {
        console.log('üìû Incoming call received:', callData);
        
        this.currentCall = callData;
        
        // Load customer data
        const customerInfo = await this.loadCustomerInfo(callData.callerNumber);
        
        // Show popup
        this.showIncomingCallPopup(callData, customerInfo);
        
        // Play ring tone (optional)
        this.playRingtone();
        
        // Show notification
        this.showBrowserNotification(callData);
    }

    async loadCustomerInfo(phoneNumber) {
        try {
            // Search customer by phone number
            const response = await fetch('/api/customers/search', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    phoneNumber: phoneNumber,
                    exactMatch: true
                })
            });
            
            const result = await response.json();
            
            if (result.success && result.data.customers.length > 0) {
                return result.data.customers[0];
            }
            
            return null;
        } catch (error) {
            console.error('Error loading customer info:', error);
            return null;
        }
    }

    showIncomingCallPopup(callData, customerInfo) {
        // Update popup content
        document.getElementById('callerNumber').textContent = callData.callerNumber;
        document.getElementById('callId').textContent = callData.callId;
        document.getElementById('callTime').textContent = new Date().toLocaleTimeString();
        
        // Update customer info
        const customerInfoEl = document.getElementById('customerInfo');
        if (customerInfo) {
            customerInfoEl.innerHTML = `
                <h4>Th√¥ng tin kh√°ch h√†ng:</h4>
                <p><strong>T√™n:</strong> ${customerInfo.fullName}</p>
                <p><strong>Email:</strong> ${customerInfo.email || 'N/A'}</p>
                <p><strong>CIF:</strong> ${customerInfo.cif || 'N/A'}</p>
                <p><strong>ƒê·ªãa ch·ªâ:</strong> ${customerInfo.address || 'N/A'}</p>
            `;
        } else {
            customerInfoEl.innerHTML = `
                <h4>Kh√°ch h√†ng m·ªõi:</h4>
                <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin trong h·ªá th·ªëng</p>
                <button onclick="createNewCustomer('${callData.callerNumber}')" class="btn-create-customer">
                    T·∫°o kh√°ch h√†ng m·ªõi
                </button>
            `;
        }
        
        // Load available agents
        this.updateAgentSelect();
        
        // Show modal
        document.getElementById('incomingCallModal').style.display = 'flex';
    }

    hideIncomingCallPopup() {
        document.getElementById('incomingCallModal').style.display = 'none';
        this.stopRingtone();
    }

    async loadAgents() {
        try {
            const response = await fetch('/api/agents/available');
            const result = await response.json();
            
            if (result.success) {
                this.availableAgents = result.data;
                this.updateAgentSelect();
            }
        } catch (error) {
            console.error('Error loading agents:', error);
        }
    }

    updateAgentSelect() {
        const select = document.getElementById('agentSelect');
        select.innerHTML = '<option value="">Ch·ªçn agent...</option>';
        
        this.availableAgents.forEach(agent => {
            if (agent.status === 'available') {
                const option = document.createElement('option');
                option.value = agent.id;
                option.textContent = `${agent.fullName} (${agent.status})`;
                select.appendChild(option);
            }
        });
    }

    answerCall() {
        const agentId = document.getElementById('agentSelect').value;
        
        if (!agentId) {
            alert('Vui l√≤ng ch·ªçn agent');
            return;
        }
        
        if (!this.currentCall) {
            alert('Kh√¥ng c√≥ cu·ªôc g·ªçi n√†o');
            return;
        }
        
        this.socket.emit('answer_call', {
            callId: this.currentCall.callId,
            agentId: parseInt(agentId),
            source: 'crm_system'
        });
        
        console.log(`üìû Answering call ${this.currentCall.callId} with agent ${agentId}`);
    }

    rejectCall() {
        if (!this.currentCall) return;
        
        this.socket.emit('end_call', {
            callId: this.currentCall.callId,
            endReason: 'crm_reject',
            source: 'crm_system'
        });
        
        console.log(`‚ùå Rejecting call ${this.currentCall.callId}`);
    }

    handleCallAnswered(data) {
        console.log('‚úÖ Call answered:', data);
        this.hideIncomingCallPopup();
        
        // Show success notification
        this.showNotification('Cu·ªôc g·ªçi ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi', 'success');
        
        // Update CRM with call info
        this.updateCRMCallStatus(data.call);
    }

    handleCallEnded(data) {
        console.log('üì¥ Call ended:', data);
        this.hideIncomingCallPopup();
        this.currentCall = null;
        
        // Show notification
        this.showNotification('Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c', 'info');
    }

    updateAgentStatus(data) {
        console.log('üë§ Agent status update:', data);
        
        // Update agent trong available list
        const agentIndex = this.availableAgents.findIndex(a => a.id === data.agentId);
        if (agentIndex !== -1) {
            this.availableAgents[agentIndex].status = data.status;
            this.updateAgentSelect();
        }
        
        // Update CRM agent display
        this.updateCRMAgentDisplay(data);
    }

    updateCallQueue(data) {
        console.log('üìã Call queue update:', data);
        
        // Update CRM queue display
        this.updateCRMQueueDisplay(data);
    }

    playRingtone() {
        // Play ringtone sound
        const audio = new Audio('/static/ringtone.mp3');
        audio.loop = true;
        audio.play().catch(e => console.log('Cannot play ringtone:', e));
        this.ringtoneAudio = audio;
    }

    stopRingtone() {
        if (this.ringtoneAudio) {
            this.ringtoneAudio.pause();
            this.ringtoneAudio = null;
        }
    }

    showBrowserNotification(callData) {
        if (Notification.permission === 'granted') {
            new Notification('Cu·ªôc g·ªçi ƒë·∫øn', {
                body: `T·ª´: ${callData.callerNumber}`,
                icon: '/static/phone-icon.png',
                requireInteraction: true
            });
        }
    }

    showNotification(message, type = 'info') {
        // Implement your notification system
        console.log(`[${type.toUpperCase()}] ${message}`);
    }

    updateCRMCallStatus(callData) {
        // Update CRM interface with call status
        // Implement based on your CRM structure
    }

    updateCRMAgentDisplay(agentData) {
        // Update CRM agent list/status display
        // Implement based on your CRM structure
    }

    updateCRMQueueDisplay(queueData) {
        // Update CRM call queue display
        // Implement based on your CRM structure
    }
}

// Global functions for popup buttons
function answerCall() {
    if (window.crmCallIntegration) {
        window.crmCallIntegration.answerCall();
    }
}

function rejectCall() {
    if (window.crmCallIntegration) {
        window.crmCallIntegration.rejectCall();
    }
}

function createNewCustomer(phoneNumber) {
    // Open customer creation form
    window.open(`/customers/create?phone=${phoneNumber}`, '_blank');
}

// Initialize when DOM loaded
document.addEventListener('DOMContentLoaded', function() {
    // Request notification permission
    if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {
        Notification.requestPermission();
    }
    
    // Initialize CRM call integration
    window.crmCallIntegration = new CRMCallIntegration();
});
```

üîß BACKEND EVENTS C·∫¨P NH·∫¨T
==========================

Backend ƒë√£ t·ª± ƒë·ªông emit c√°c events sau:

## Existing Events:
- `incoming_call` - Khi c√≥ cu·ªôc g·ªçi ƒë·∫øn
- `call_answered` - Khi agent answer
- `call_ended` - Khi cu·ªôc g·ªçi k·∫øt th√∫c  
- `agent_status_update` - Khi agent thay ƒë·ªïi status
- `call_queue_update` - Khi queue thay ƒë·ªïi

## Additional Events for CRM:
```javascript
// Emit customer data v·ªõi call
socket.emit('incoming_call_with_customer', {
    ...callData,
    customerInfo: customerData || null
});

// Emit call metrics
socket.emit('call_metrics_update', {
    totalCalls: stats.totalCalls,
    averageWaitTime: stats.avgWaitTime,
    activeAgents: stats.activeAgents
});
```

üìä CRM DASHBOARD WIDGETS
========================

## 1. Call Status Widget

```html
<div class="call-status-widget">
    <h3>üìû Call Center Status</h3>
    <div class="stats-grid">
        <div class="stat-item">
            <span class="stat-number" id="activeCalls">0</span>
            <span class="stat-label">Active Calls</span>
        </div>
        <div class="stat-item">
            <span class="stat-number" id="queuedCalls">0</span>
            <span class="stat-label">Queued Calls</span>
        </div>
        <div class="stat-item">
            <span class="stat-number" id="availableAgents">0</span>
            <span class="stat-label">Available Agents</span>
        </div>
    </div>
</div>
```

## 2. Recent Calls Widget

```html
<div class="recent-calls-widget">
    <h3>üìã Recent Calls</h3>
    <div id="recentCallsList">
        <!-- Calls list will be populated here -->
    </div>
</div>
```

üöÄ IMPLEMENTATION STEPS
=======================

### Step 1: Add to CRM HTML
```html
<!-- Th√™m v√†o head c·ªßa CRM -->
<script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>

<!-- Th√™m modal HTML -->
<!-- [Copy modal HTML from above] -->

<!-- Th√™m CSS -->
<!-- [Copy CSS from above] -->

<!-- Th√™m JavaScript -->
<script>
// [Copy JavaScript integration from above]
</script>
```

### Step 2: Test Integration
1. M·ªü CRM trong browser
2. G·ªçi t·ª´ softphone (http://localhost:8000/softphone)
3. CRM s·∫Ω hi·ªÉn th·ªã popup incoming call
4. Click "Tr·∫£ l·ªùi" ƒë·ªÉ k·∫øt n·ªëi cu·ªôc g·ªçi

### Step 3: Customize for Your CRM
- Adjust CSS ƒë·ªÉ match CRM theme
- Integrate v·ªõi existing customer search
- Add call logging functionality
- Customize notification system

==========================================
CRM S·∫º NH·∫¨N ƒê∆Ø·ª¢C INCOMING CALLS! üìû‚ú®
==========================================

V·ªõi integration n√†y, CRM s·∫Ω real-time nh·∫≠n v√† x·ª≠ l√Ω:
‚úÖ Incoming call popups
‚úÖ Customer data display  
‚úÖ Agent selection
‚úÖ Call answer/reject t·ª´ CRM
‚úÖ Real-time status updates
