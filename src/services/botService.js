import API_CONFIG from "../config/api.js";
import cardService from "./cardService.js";

class BotService {
  constructor() {
    this.baseURL = API_CONFIG.BASE_URL;
    this.endpoints = API_CONFIG.ENDPOINTS.BOT;
  }

  // Helper method ƒë·ªÉ t·∫°o URL ƒë·∫ßy ƒë·ªß
  getFullURL(endpoint) {
    return `${this.baseURL}${endpoint}`;
  }

  // Helper method ƒë·ªÉ handle API response
  async handleResponse(response) {
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || `HTTP Error: ${response.status}`);
    }
    return await response.json();
  }

  // Helper method ƒë·ªÉ t·∫°o request options
  createRequestOptions(method = "GET", body = null, additionalHeaders = {}) {
    const options = {
      method,
      headers: {
        ...API_CONFIG.DEFAULT_HEADERS,
        ...additionalHeaders,
      },
      timeout: API_CONFIG.TIMEOUT,
    };

    if (body && method !== "GET") {
      options.body = JSON.stringify(body);
    }

    return options;
  }

  /**
   * X√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i v√† l·∫•y th√¥ng tin kh√°ch h√†ng
   * @param {string} phoneNumber - S·ªë ƒëi·ªán tho·∫°i c·∫ßn x√°c th·ª±c
   * @returns {Promise<Object>} - Th√¥ng tin kh√°ch h√†ng
   */
  async verifyPhone(phoneNumber) {
    try {
      const response = await fetch(
        this.getFullURL(this.endpoints.VERIFY_PHONE),
        this.createRequestOptions("POST", { phoneNumber })
      );

      const result = await this.handleResponse(response);

      if (result.success) {
        return result.data;
      } else {
        throw new Error(result.message || "Kh√¥ng th·ªÉ x√°c th·ª±c s·ªë ƒëi·ªán tho·∫°i");
      }
    } catch (error) {
      console.error("Error verifying phone:", error);

      // Fallback cho development - tr·∫£ v·ªÅ kh√°ch h√†ng m·ªõi
      return {
        phone: phoneNumber,
        name: "Kh√°ch h√†ng m·ªõi",
        isExistingCustomer: false,
      };
    }
  }

  /**
   * G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ bot
   * @param {string} message - Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
   * @param {Object} customerInfo - Th√¥ng tin kh√°ch h√†ng
   * @param {string} conversationId - ID cu·ªôc tr√≤ chuy·ªán (t√πy ch·ªçn)
   * @returns {Promise<Object>} - Ph·∫£n h·ªìi t·ª´ bot
   */
  async sendMessage(message, customerInfo, conversationId = null) {
    try {
      const requestBody = {
        message,
        customerInfo,
        conversationId,
      };

      const response = await fetch(
        this.getFullURL(this.endpoints.CHAT),
        this.createRequestOptions("POST", requestBody)
      );

      const result = await this.handleResponse(response);

      if (result.success) {
        return {
          response: result.data.response,
          conversationId: result.data.conversationId,
          timestamp: new Date(result.data.timestamp),
        };
      } else {
        throw new Error(result.message || "Kh√¥ng th·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ bot");
      }
    } catch (error) {
      console.error("Error sending message to bot:", error);

      // Fallback response cho development
      // L·∫•y conversation state t·ª´ localStorage n·∫øu c√≥
      const conversationKey = `conversation_${customerInfo.phone || "unknown"}`;
      const savedState = JSON.parse(
        localStorage.getItem(conversationKey) || "{}"
      );

      const fallbackResult = await this.generateFallbackResponse(
        message,
        customerInfo,
        savedState
      );

      // N·∫øu k·∫øt qu·∫£ c√≥ state, l∆∞u l·∫°i
      if (
        fallbackResult &&
        typeof fallbackResult === "object" &&
        fallbackResult.nextStep
      ) {
        const newState = {
          intent: this.isBlockCardIntent(message)
            ? "block_card"
            : savedState.intent,
          step: fallbackResult.nextStep,
          data: fallbackResult.data,
          timestamp: new Date().toISOString(),
        };

        if (fallbackResult.nextStep === "end") {
          localStorage.removeItem(conversationKey);
        } else {
          localStorage.setItem(conversationKey, JSON.stringify(newState));
        }

        return {
          response: fallbackResult.response,
          conversationId: conversationId || `fallback_${Date.now()}`,
          timestamp: new Date(),
          state: newState,
        };
      }

      return {
        response:
          typeof fallbackResult === "string"
            ? fallbackResult
            : fallbackResult.response,
        conversationId: conversationId || `fallback_${Date.now()}`,
        timestamp: new Date(),
      };
    }
  }

  /**
   * L·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
   * @param {string} conversationId - ID cu·ªôc tr√≤ chuy·ªán
   * @returns {Promise<Object>} - L·ªãch s·ª≠ tin nh·∫Øn
   */
  async getConversation(conversationId) {
    try {
      const response = await fetch(
        this.getFullURL(`${this.endpoints.CONVERSATION}/${conversationId}`),
        this.createRequestOptions("GET")
      );

      const result = await this.handleResponse(response);

      if (result.success) {
        return result.data;
      } else {
        throw new Error(
          result.message || "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán"
        );
      }
    } catch (error) {
      console.error("Error getting conversation:", error);
      return {
        conversationId,
        messages: [],
      };
    }
  }

  /**
   * Ph·∫£n h·ªìi d·ª± ph√≤ng khi backend kh√¥ng kh·∫£ d·ª•ng
   * @param {string} userMessage - Tin nh·∫Øn ng∆∞·ªùi d√πng
   * @param {Object} customerInfo - Th√¥ng tin kh√°ch h√†ng
   * @returns {string} - Ph·∫£n h·ªìi d·ª± ph√≤ng
   */
  /**
   * X·ª≠ l√Ω intent kh√≥a th·∫ª v·ªõi conversation state
   * @param {string} userMessage - Tin nh·∫Øn ng∆∞·ªùi d√πng
   * @param {Object} customerInfo - Th√¥ng tin kh√°ch h√†ng
   * @param {Object} conversationState - Tr·∫°ng th√°i conversation
   * @returns {Promise<Object>} - Ph·∫£n h·ªìi bot v·ªõi state
   */
  async handleBlockCardIntent(
    userMessage,
    customerInfo,
    conversationState = {}
  ) {
    try {
      if (!customerInfo.isExistingCustomer || !customerInfo.cif) {
        return {
          response: `Xin l·ªói ${customerInfo.name}, ƒë·ªÉ th·ª±c hi·ªán kh√≥a th·∫ª, t√¥i c·∫ßn x√°c th·ª±c th√¥ng tin kh√°ch h√†ng. Vui l√≤ng li√™n h·ªá hotline 1900 545 415 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.`,
          nextStep: "end",
        };
      }

      // B∆∞·ªõc 1: X√°c ƒë·ªãnh intent v√† hi·ªÉn th·ªã danh s√°ch th·∫ª
      if (!conversationState.step || conversationState.step === "start") {
        const cardsData = await cardService.getCardsByCIF(customerInfo.cif);

        if (!cardsData.cards || cardsData.cards.length === 0) {
          return {
            response: `${customerInfo.name}, t√¥i kh√¥ng t√¨m th·∫•y th·∫ª n√†o trong h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá hotline 1900 545 415 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`,
            nextStep: "end",
          };
        }

        let response = `Ch√†o ${customerInfo.name}! T√¥i hi·ªÉu b·∫°n mu·ªën kh√≥a th·∫ª. ƒê·ªÉ h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, vui l√≤ng cho bi·∫øt l√Ω do kh√≥a th·∫ª:\n\n`;

        response += `1. üîí Th·∫ª b·ªã m·∫•t\n`;
        response += `2. üö® Th·∫ª b·ªã ƒë√°nh c·∫Øp\n`;
        response += `3. ‚è∏Ô∏è Kh√≥a t·∫°m th·ªùi (t·ª± nguy·ªán)\n`;
        response += `4. ‚õî Kh√≥a vƒ©nh vi·ªÖn\n`;
        response += `5. ‚ö†Ô∏è Ph√°t hi·ªán giao d·ªãch kh·∫£ nghi\n\n`;

        response += `üìã C√°c th·∫ª c·ªßa b·∫°n:\n`;
        cardsData.cards.forEach((card, index) => {
          const cardIcon = card.cardType === "credit" ? "üí≥" : "üèß";
          const statusIcon = card.status === "active" ? "‚úÖ" : "‚ùå";
          response += `${cardIcon} ${card.cardName}: ${card.maskedNumber} ${statusIcon}\n`;
        });

        response += `\n‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:\n`;
        response += `- Kh√≥a vƒ©nh vi·ªÖn: Kh√¥ng th·ªÉ kh√¥i ph·ª•c, c·∫ßn l√†m th·∫ª m·ªõi\n`;
        response += `- Kh√≥a t·∫°m th·ªùi: C√≥ th·ªÉ m·ªü l·∫°i qua hotline\n\n`;

        response += `Vui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi l√Ω do kh√≥a th·∫ª:`;

        return {
          response,
          nextStep: "select_reason",
          data: { cards: cardsData.cards },
        };
      }

      // B∆∞·ªõc 2: Ch·ªçn l√Ω do kh√≥a th·∫ª
      if (conversationState.step === "select_reason") {
        const reasonMap = {
          1: { reason: "lost", type: "permanent", label: "Th·∫ª b·ªã m·∫•t" },
          2: { reason: "stolen", type: "permanent", label: "Th·∫ª b·ªã ƒë√°nh c·∫Øp" },
          3: {
            reason: "customer_request",
            type: "temporary",
            label: "Kh√≥a t·∫°m th·ªùi",
          },
          4: {
            reason: "customer_request",
            type: "permanent",
            label: "Kh√≥a vƒ©nh vi·ªÖn",
          },
          5: {
            reason: "suspicious",
            type: "temporary",
            label: "Giao d·ªãch kh·∫£ nghi",
          },
        };

        const selectedReason = reasonMap[userMessage.trim()];
        if (!selectedReason) {
          return {
            response: `Vui l√≤ng ch·ªçn m·ªôt l√Ω do h·ª£p l·ªá (1-5):\n1. üîí Th·∫ª b·ªã m·∫•t\n2. üö® Th·∫ª b·ªã ƒë√°nh c·∫Øp\n3. ‚è∏Ô∏è Kh√≥a t·∫°m th·ªùi\n4. ‚õî Kh√≥a vƒ©nh vi·ªÖn\n5. ‚ö†Ô∏è Giao d·ªãch kh·∫£ nghi`,
            nextStep: "select_reason",
            data: conversationState.data,
          };
        }

        const cards = conversationState.data?.cards || [];
        let response = `B·∫°n ƒë√£ ch·ªçn: ${selectedReason.label}\n\n`;
        response += `üìã Vui l√≤ng ch·ªçn th·∫ª c·∫ßn kh√≥a b·∫±ng c√°ch nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng:\n\n`;

        cards.forEach((card, index) => {
          const cardIcon = card.cardType === "credit" ? "üí≥" : "üèß";
          response += `${index + 1}. ${cardIcon} ${card.cardName}: ${
            card.maskedNumber
          }\n`;
        });

        response += `\nVui l√≤ng nh·∫≠p s·ªë t∆∞∆°ng ·ª©ng v·ªõi th·∫ª:`;

        return {
          response,
          nextStep: "select_card",
          data: {
            cards,
            selectedReason: selectedReason,
          },
        };
      }

      // B∆∞·ªõc 3: Ch·ªçn th·∫ª c·∫ßn kh√≥a
      if (conversationState.step === "select_card") {
        const cardIndex = parseInt(userMessage.trim()) - 1;
        const cards = conversationState.data?.cards || [];

        if (cardIndex < 0 || cardIndex >= cards.length) {
          return {
            response: `Vui l√≤ng ch·ªçn m·ªôt th·∫ª h·ª£p l·ªá (1-${cards.length})`,
            nextStep: "select_card",
            data: conversationState.data,
          };
        }

        const selectedCard = cards[cardIndex];
        const reason = conversationState.data?.selectedReason;

        let response = `üìç X√°c nh·∫≠n th√¥ng tin kh√≥a th·∫ª:\n\n`;
        response += `üî∏ Th·∫ª: ${selectedCard.cardName}\n`;
        response += `üî∏ S·ªë th·∫ª: ${selectedCard.maskedNumber}\n`;
        response += `üî∏ L√Ω do: ${reason.label}\n`;
        response += `üî∏ Lo·∫°i kh√≥a: ${
          reason.type === "permanent" ? "Vƒ©nh vi·ªÖn" : "T·∫°m th·ªùi"
        }\n`;
        response += `üî∏ Hi·ªáu l·ª±c: Ngay l·∫≠p t·ª©c\n\n`;

        response += `‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:\n`;
        response += `- Sau khi kh√≥a, th·∫ª s·∫Ω kh√¥ng th·ªÉ s·ª≠ d·ª•ng cho b·∫•t k·ª≥ giao d·ªãch n√†o\n`;
        if (reason.type === "permanent") {
          response += `- Kh√≥a vƒ©nh vi·ªÖn KH√îNG th·ªÉ kh√¥i ph·ª•c, c·∫ßn l√†m th·∫ª m·ªõi\n`;
        } else {
          response += `- Kh√≥a t·∫°m th·ªùi c√≥ th·ªÉ m·ªü l·∫°i qua hotline 1900 545 415\n`;
        }

        response += `\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th·ª±c hi·ªán? Vui l√≤ng nh·∫≠p:\n`;
        response += `‚Ä¢ "XAC NHAN" ƒë·ªÉ ti·∫øp t·ª•c\n`;
        response += `‚Ä¢ "HUY BO" ƒë·ªÉ h·ªßy b·ªè`;

        return {
          response,
          nextStep: "confirm_block",
          data: {
            ...conversationState.data,
            selectedCard,
          },
        };
      }

      // B∆∞·ªõc 4: X√°c nh·∫≠n v√† th·ª±c hi·ªán kh√≥a th·∫ª
      if (conversationState.step === "confirm_block") {
        const userResponse = userMessage.trim().toUpperCase();

        if (userResponse === "HUY BO") {
          return {
            response: `ƒê√£ h·ªßy b·ªè y√™u c·∫ßu kh√≥a th·∫ª. N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá hotline 1900 545 415.`,
            nextStep: "end",
          };
        }

        if (userResponse !== "XAC NHAN") {
          return {
            response: `Vui l√≤ng nh·∫≠p "XAC NHAN" ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c "HUY BO" ƒë·ªÉ h·ªßy b·ªè.`,
            nextStep: "confirm_block",
            data: conversationState.data,
          };
        }

        // Th·ª±c hi·ªán kh√≥a th·∫ª
        const selectedCard = conversationState.data?.selectedCard;
        const reason = conversationState.data?.selectedReason;

        const blockRequest = cardService.createBlockRequest(
          selectedCard.cardId,
          customerInfo.cif,
          reason.reason,
          reason.type,
          {
            fullName: customerInfo.name,
            notes: `Kh√≥a th·∫ª qua bot chat - ${reason.label}`,
          }
        );

        try {
          const blockResult = await cardService.blockCard(blockRequest);

          let response = `‚úÖ Kh√≥a th·∫ª th√†nh c√¥ng!\n\n`;
          response += `üìã Th√¥ng tin chi ti·∫øt:\n`;
          response += `‚Ä¢ Th·∫ª: ${blockResult.maskedNumber}\n`;
          response += `‚Ä¢ Tr·∫°ng th√°i: ƒê√£ kh√≥a\n`;
          response += `‚Ä¢ Lo·∫°i kh√≥a: ${
            reason.type === "permanent" ? "Vƒ©nh vi·ªÖn" : "T·∫°m th·ªùi"
          }\n`;
          response += `‚Ä¢ Th·ªùi gian: ${new Date().toLocaleString("vi-VN")}\n`;
          response += `‚Ä¢ M√£ tham chi·∫øu: ${blockResult.referenceNumber}\n\n`;

          response += `üìå B∆∞·ªõc ti·∫øp theo:\n`;
          blockResult.nextSteps.forEach((step, index) => {
            response += `${index + 1}. ${step}\n`;
          });

          response += `\nT√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ th√™m cho b·∫°n kh√¥ng?`;

          return {
            response,
            nextStep: "end",
            success: true,
          };
        } catch (error) {
          console.error("Error blocking card:", error);
          return {
            response: `‚ùå C√≥ l·ªói x·∫£y ra khi kh√≥a th·∫ª. Vui l√≤ng li√™n h·ªá hotline 1900 545 415 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay l·∫≠p t·ª©c.\n\nM√£ l·ªói: ${error.message}`,
            nextStep: "end",
            success: false,
          };
        }
      }

      return {
        response: `Xin l·ªói, c√≥ l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i ho·∫∑c li√™n h·ªá hotline 1900 545 415.`,
        nextStep: "end",
      };
    } catch (error) {
      console.error("Error handling block card intent:", error);
      return {
        response: `Xin l·ªói ${customerInfo.name}, t√¥i g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω y√™u c·∫ßu kh√≥a th·∫ª. Vui l√≤ng li√™n h·ªá hotline 1900 545 415 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay l·∫≠p t·ª©c.`,
        nextStep: "end",
      };
    }
  }

  /**
   * Ki·ªÉm tra intent kh√≥a th·∫ª
   * @param {string} message - Tin nh·∫Øn ng∆∞·ªùi d√πng
   * @returns {boolean} - True n·∫øu l√† intent kh√≥a th·∫ª
   */
  isBlockCardIntent(message) {
    const blockCardKeywords = [
      "kh√≥a th·∫ª",
      "block th·∫ª",
      "t·∫°m kh√≥a th·∫ª",
      "d·ª´ng th·∫ª",
      "th·∫ª b·ªã m·∫•t",
      "th·∫ª b·ªã ƒë√°nh c·∫Øp",
      "kh√≥a t·∫°m th·ªùi",
      "kh√≥a vƒ©nh vi·ªÖn",
      "block card",
      "stop card",
      "th·∫ª m·∫•t",
      "m·∫•t th·∫ª",
      "ƒë√°nh c·∫Øp th·∫ª",
      "th·∫ª b·ªã hack",
    ];

    const lowerMessage = message.toLowerCase();
    return blockCardKeywords.some((keyword) => lowerMessage.includes(keyword));
  }

  async generateFallbackResponse(
    userMessage,
    customerInfo,
    conversationState = {}
  ) {
    const message = userMessage.toLowerCase();
    const customerName = customerInfo.name || "b·∫°n";

    // Ki·ªÉm tra intent kh√≥a th·∫ª ho·∫∑c ƒëang trong conversation kh√≥a th·∫ª
    if (
      this.isBlockCardIntent(message) ||
      conversationState.intent === "block_card"
    ) {
      const result = await this.handleBlockCardIntent(
        userMessage,
        customerInfo,
        conversationState
      );
      return result.response || result;
    }

    // C√°c t·ª´ kh√≥a v√† ph·∫£n h·ªìi t∆∞∆°ng ·ª©ng
    const responses = {
      "ti·∫øt ki·ªám": `Ch√†o ${customerName}! HDBank c√≥ nhi·ªÅu s·∫£n ph·∫©m ti·∫øt ki·ªám h·∫•p d·∫´n:
      
üìà Ti·∫øt ki·ªám c√≥ k·ª≥ h·∫°n:
- 6 th√°ng: 5.8%/nƒÉm
- 12 th√°ng: 6.5%/nƒÉm  
- 24 th√°ng: 7.2%/nƒÉm

üí∞ S·ªë ti·ªÅn g·ª≠i t·ªëi thi·ªÉu ch·ªâ 500,000 VND
üéÅ T·∫∑ng qu√† khi g·ª≠i t·ª´ 100 tri·ªáu

${customerName} mu·ªën bi·∫øt th√™m v·ªÅ k·ª≥ h·∫°n n√†o c·ª• th·ªÉ?`,

      "th·∫ª t√≠n d·ª•ng": `Ch√†o ${customerName}! HDBank c√≥ c√°c lo·∫°i th·∫ª t√≠n d·ª•ng ph√π h·ª£p v·ªõi m·ªçi nhu c·∫ßu:

üí≥ Th·∫ª Platinum: H·∫°n m·ª©c ƒë·∫øn 500 tri·ªáu
üí≥ Th·∫ª Gold: H·∫°n m·ª©c ƒë·∫øn 200 tri·ªáu
üí≥ Th·∫ª Classic: H·∫°n m·ª©c ƒë·∫øn 50 tri·ªáu

‚ú® ∆Øu ƒë√£i:
- Mi·ªÖn ph√≠ nƒÉm ƒë·∫ßu
- Ho√†n ti·ªÅn ƒë·∫øn 1.5%
- T√≠ch ƒëi·ªÉm ƒë·ªïi qu√†

${customerName} quan t√¢m ƒë·∫øn lo·∫°i th·∫ª n√†o nh·∫•t?`,

      "vay mua nh√†": `Ch√†o ${customerName}! G√≥i vay mua nh√† HDBank r·∫•t ∆∞u ƒë√£i:

üè† ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:
- L√£i su·∫•t t·ª´ 8.5%/nƒÉm
- Vay ƒë·∫øn 85% gi√° tr·ªã nh√†
- Th·ªùi h·∫°n ƒë·∫øn 25 nƒÉm
- Th·ªß t·ª•c ƒë∆°n gi·∫£n

üí∞ H·ªó tr·ª£ vay t·ª´ 500 tri·ªáu - 50 t·ª∑ VND

${customerName} c·∫ßn vay kho·∫£ng bao nhi√™u ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n?`,

      "internet banking": `Ch√†o ${customerName}! HDBank Mobile Banking - Ng√¢n h√†ng s·ªë hi·ªán ƒë·∫°i nh·∫•t:

üì± T√≠nh nƒÉng ch√≠nh:
- Chuy·ªÉn ti·ªÅn mi·ªÖn ph√≠ trong HDBank
- Thanh to√°n h√≥a ƒë∆°n 24/7
- Qu·∫£n l√Ω th·∫ª t√≠n d·ª•ng
- ƒê·∫ßu t∆∞ online

üîí B·∫£o m·∫≠t tuy·ªát ƒë·ªëi v·ªõi sinh tr·∫Øc h·ªçc

${customerName} ƒë√£ c√≥ t√†i kho·∫£n HDBank ch∆∞a? T√¥i s·∫Ω h∆∞·ªõng d·∫´n ƒëƒÉng k√Ω!`,

      "sms banking": `Ch√†o ${customerName}! SMS Banking HDBank gi√∫p b·∫°n:

üì® Nh·∫≠n th√¥ng b√°o t·ª©c th√¨:
- Bi·∫øn ƒë·ªông s·ªë d∆∞
- Giao d·ªãch th·∫ª
- ƒê√°o h·∫°n ti·∫øt ki·ªám

üí∏ Ph√≠ ch·ªâ 11,000 VND/th√°ng
üì≤ ƒêƒÉng k√Ω d·ªÖ d√†ng t·∫°i chi nh√°nh

${customerName} mu·ªën ƒëƒÉng k√Ω d·ªãch v·ª• n√†y kh√¥ng?`,
    };

    // T√¨m t·ª´ kh√≥a ph√π h·ª£p
    for (const [keyword, response] of Object.entries(responses)) {
      if (message.includes(keyword)) {
        return response;
      }
    }

    // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
    return `Ch√†o ${customerName}! C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi HDBank AI Assistant.

T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:
üè¶ T√†i kho·∫£n ti·∫øt ki·ªám
üí≥ Th·∫ª t√≠n d·ª•ng & ghi n·ª£  
üè† Vay mua nh√†, vay ti√™u d√πng
üì± Internet Banking & Mobile Banking
üì® SMS Banking

B·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ s·∫£n ph·∫©m n√†o b·∫°n quan t√¢m, t√¥i s·∫Ω t∆∞ v·∫•n chi ti·∫øt cho b·∫°n!

*L∆∞u √Ω: Hi·ªán ƒëang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo. ƒê·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t, vui l√≤ng ƒë·∫£m b·∫£o backend API ƒëang ho·∫°t ƒë·ªông.*`;
  }
}

// Export singleton instance
export default new BotService();
